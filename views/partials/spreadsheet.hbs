<style>
    .container {

        margin-right: auto;
        margin-left: auto;
    }

    .container input {
        margin-top: 5px;
        margin-bottom: 5px;
        width: 35%;
    }


    .container button {
        width: 10%;
    }

    .checkBox {
        margin-left: 210px;
    }

    .row input {
        flex-grow: 1;
        flex-shrink: 1;
        margin: 5px;
        border: red solid 0.5px;
        font-family: monospace;
        font-size: 12pt;
        padding: 4px;
        text-align: center;
        width: 1ch;
    }

    #export-csv {
        width: 10%;
        ;
    }

    #export-area {
        border: thin solid black;
        margin-top: 20px;
        width: 30%;
        padding: 10px;
    }

    #spread-sheet {
        width: 75%;
        padding: 10px;
        margin-top: 30px;
        margin-right: auto;
        margin-left: auto;
        border: thin white solid;
    }
</style>

<body>



    <h2 class="text-center pt-2">Your Spreadsheets: </h2>
    <div class="container">
        <ul id="list">
        </ul>
    </div>

    <h2 class="text-center pt-2">Create your own spreadsheet</h2>
    <a href="/user-sheets">Manage Spreadsheets</a>
    <div class="container">
        {{!-- <label> Name: <input id="sheetname"> </label><br> --}}
        <input id="sheetname" type="text" placeholder="Name of the spread sheet."><br>
        <input id="row" type="number" placeholder="Number of rows."><br>
        <input id="col" type="number" placeholder="Number of columns."><br>
        <input id="sub" type="submit" placeholder="submit"><br>
        <button id="load">Load</button>
        <button id="save">Save</button><br>
    </div>
    <div class="checkBox" style="display: flex;">
        <label class="checkbox-inline">Sharable:
            <input type="checkbox" id="shareable" value="">
        </label>
    </div>

    <div id="spread-sheet"></div>

    <div class="container">
        <input id="export-csv" type="button" value="Export">
        <pre id="export-area" placeholder="Export here"></pre>
    </div>

    {{!-- <div class="container">
        <input id="import-csv" type="button" value="Import here">
        <pre id="import-area"></pre>
    </div> --}}



    <script>
        const requestParams = {
            mode: 'cors',
            credentials: 'same-origin',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
        };

        const submit = document.getElementById('sub');
        const spreadSheet = document.getElementById('spread-sheet');
        const loadButton = document.querySelector('#load');
        const saveButton = document.querySelector('#save');
        const sheetName = document.querySelector('#sheetname');
        const row1 = document.getElementById('row').value;
        const col1 = document.getElementById('col').value;
        const makeSheet = makeSpreadSheet(col1, row1);
        const statusToggler = document.getElementById('shareable') // Shareable toggler
        //spreadSheet.append(makeSheet);
        const exportButton = document.querySelector('#export-csv')

        const listArea = document.querySelector('#list');
        // load all the available spread sheet names

        async function loadNames(container) {
            const params = { ...requestParams, method: 'GET' };
            const resp = await fetch('/sheet-list', params);
            const json = await resp.json(); // We are getting back a tuple with name and status
            container.innerHTML = '';
            container.append(...json.map((x) => {
                const li = document.createElement('li');
                const span = document.createElement('span');
                span.contentEditable = "true"
                span.textContent = x.name;
                li.append(span);
                li.append(' ');
                const button = document.createElement('button');
                const submitButton = document.createElement('button');
                button.textContent = 'DELETE';
                submitButton.textContent = 'SUBMIT'
                let statusCheck;
                if (x.status === 0) {
                    statusCheck = document.createElement('input');
                    statusCheck.type = "checkbox";
                    statusCheck.checked = false;
                } else {
                    statusCheck = document.createElement('input');
                    statusCheck.type = "checkbox";
                    statusCheck.checked = true;
                }
                li.append(button);
                li.append(submitButton);
                li.append(statusCheck)
                return li;
            }));
            console.log(json);
        }
        loadNames(listArea);

        // clicking on a list item load the spread sheet

        listArea.addEventListener('click', async (evt) => {
            const { target } = evt;
            if (target.nodeName === 'SPAN') {
                const name = target.textContent;
                // update name input for sheet
                sheetName.value = name;
                // GET /sheet/:name endpoint request
                const params = { ...requestParams, method: 'GET' };
                const resp = await fetch(`/sheet/${name}`, params);
                const json = await resp.json();
                console.log(json);
                const sheet = rebuildSpreadSheet(json);
                spreadSheet.innerHTML = '';
                spreadSheet.append(sheet);

                // HAS LOGIC TO SHOW SPREADSHEET WITH INPUTS
            }
            else if (target.textContent === 'DELETE') {
                const name = target.parentNode.querySelector('span').textContent;
                const params = { ...requestParams, method: 'DELETE' };
                const resp = await fetch(`/sheet/${name}`, params);
                const json = await resp.json();
                console.log(json);
                if (json.ok) {
                    // refresh the names
                    await loadNames(listArea);
                }
            }


        });

        function getSheetInputs(element) {
            const ssRow = Array.from(element.querySelectorAll('div.row'));
            const sheet1 = ssRow.map((r) => {
                return Array.from(r.querySelectorAll('input'));
            });
            return sheet1;
        }

        // return a 2D array of values
        function getValues(sheetInputs) {
            return sheetInputs.map((r) => r.map((c) => c.value));
        }

        // assumes sizes of inputs and values are the same
        function setValues(sheetInputs, values) {
            for (let i = 0; i < sheetInputs.length; i++) {
                const row = sheetInputs[i];
                for (let j = 0; j < row.length; j++) {
                    row[j].value = values[i][j];
                }
            }
        }

        function rebuildSpreadSheet(payload) {
            const sheet = document.createElement('div');
            sheet.setAttribute('class', 'sheet');
            for (let index = 0; index < payload.length; index++) {
                const row = document.createElement('div');
                row.setAttribute('class', 'row');
                for (let jendex = 0; jendex < payload[index].length; jendex++) {
                    const inp = document.createElement('input');
                    inp.value = payload[index][jendex];
                    row.append(inp);
                }
                sheet.append(row);
            }
            return sheet;

        }

        function makeSpreadSheet(n, m) {
            const sheet = document.createElement('div');
            sheet.setAttribute('class', 'sheet');
            for (let j = 0; j < m; j++) {
                const row = document.createElement('div');
                row.setAttribute('class', 'row');
                for (let i = 0; i < n; i++) {
                    const inp = document.createElement('input');
                    row.append(inp);
                }
                sheet.append(row);
            }
            return sheet;
        }

        submit.addEventListener('click', function (evt) {
            const row1 = document.getElementById('row').value;
            const col1 = document.getElementById('col').value;
            const sheet = makeSpreadSheet(col1, row1);
            spreadSheet.innerHTML = '';
            spreadSheet.append(sheet);
        });

        saveButton.addEventListener('click', async (evt) => {
            const row1 = document.getElementById('row').value;
            const col1 = document.getElementById('col').value;

            const name = sheetName.value;

            if (name.trim().length === 0) return; // ignore if no name
            const inputs = getSheetInputs(spreadSheet); // BHOGCHODER DOL
            console.log(inputs)
            const values = JSON.stringify({ "values": getValues(inputs), "status": statusToggler.checked });
            console.log(values);
            const params = { ...requestParams, method: 'PUT', body: values };
            const resp = await fetch(`/sheet/${name}`, params);
            const json = await resp.json();
            console.log('save');
            if (json.ok) {
                console.log('added');
                loadNames(listArea);
            }
            else {
                console.log('not added');
            }
        });

        loadButton.addEventListener('click', async (evt) => {
            let sheetNameLoad = sheetName.value
            // GET /sheet/:sheetNameLoad endpoint request
            const params = { ...requestParams, method: 'GET' };
            const resp = await fetch(`/sheet/${sheetNameLoad}`, params);
            const json = await resp.json();
            console.log(json);
            const sheet = rebuildSpreadSheet(json);
            spreadSheet.innerHTML = '';
            spreadSheet.append(sheet);

        });

        const exporting = document.getElementById('export-csv');
        const exportArea = document.getElementById('export-area');
        exporting.addEventListener('click', async (evt) => {
            const name = sheetName.value;
            const inputs = getSheetInputs(spreadSheet);
            const values = JSON.stringify(getValues(inputs));
            const params = { ...requestParams, method: 'PUT', body: values };
            const resp = await fetch('/csv-export', params);
            // read the text
            const text = await resp.text();
            console.log(text);
            exportArea.textContent = text;
        });
       // get a 2D array of the inputs, note this array matches
        // the row/column organization of the spread sheet

    </script>


    <h1>CSV Import</h1>
    <div class="ctrl">
        <label> Name: <input id="import-name"> </label>
        <button id="import">Import</button>
        <p>
            Must be 5 rows by 4 columns to match the fixed size spread sheet.
        </p>
        <textarea id="csv-input" rows="10" cols="50"></textarea>
    </div>

    <script>
        async function importCSV(name, content) {
            // the transmitted content is plain text from the text area
            const params = {
                ...requestParams, method: 'PUT',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'text/plain',
                },
                body: content,
            };
            const resp = await fetch(`/csv-import/${name}`, params);
            const json = await resp.json();
            return json;
        }

        // endpoint PUT /csv-import/:name
        // import CSV from browser
        const importButton = document.querySelector('#import');
        const importName = document.querySelector('#import-name');
        const csvInput = document.querySelector('#csv-input');
        importButton.addEventListener('click', async (evt) => {
            const name = importName.value;
            if (name.trim().length === 0) return; // ignore if no name
            const json = await importCSV(name, csvInput.value);
            console.log(json);
            if (json.ok) {
                // refresh the names
                await loadNames(listArea);
                await downloadLinks();
                await loadSheetChoice();
            }
        });

    </script>



    {{!-- // HERE WE ARE UPDATING SHEET NAME AND STATUS
            else if (target.textContent === 'SUBMIT') {

                const name = target.parentNode.querySelector('span').textContent;
                let id = parseInt(target.parentNode.querySelector('span').id);

                const inputs = getSheetInputs(spreadSheet); // BHOGCHODER DOL
                const values = JSON.stringify({ "values": getValues(inputs), "status": statusToggler.checked, "name": name, "id": id });
                console.log(values);
                const params = { ...requestParams, method: 'PUT', body: values };
                const resp = await fetch(`/update-own-sheet/${id}`, params);
                const json = await resp.json();
                console.log('save');
                if (json.ok) {
                    console.log('added');
                    loadNames(listArea);
                }
                else {
                    console.log('not added');
                }

            }     --}}